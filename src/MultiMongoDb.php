<?php
namespace Codeception\Module;

/**
 * Works with multiple MongoDb databases.
 *
 * The most important function of this module is cleaning database before each test.
 * To have your database properly cleaned you should configure it to access the database.
 *
 * In order to have your database populated with data you need a valid js file with data (of the same style which can be fed up to mongo binary)
 * File can be generated by RockMongo export command
 * Just put it in ``` tests/_data ``` dir (by default) and specify path to it in config.
 * Next time after database is cleared all your data will be restored from dump.
 * The DB preparation should as following:
 * - clean database
 * - system collection system.users should contain the user which will be authenticated while script performs DB operations
 *
 * Connection is done by MongoDb driver, which is stored in Codeception\Lib\Driver namespace.
 * Check out the driver if you get problems loading dumps and cleaning databases.
 *
 * ## Status
 *
 * * Maintainer: **grzegorzkurtyka**
 * * Stability: **beta**
 *
 * *Please review the code of non-stable modules and provide patches if you have issues.*
 *
 * ## Config (single database)
 *
 * * dsn *required* - MongoDb DSN with the db name specified at the end of the host after slash
 * * user *required* - user to access database
 * * password *required* - password
 * * dump - path to database dump
 * * populate: true - should the dump be loaded before test suite is started.
 * * cleanup: true - should the dump be reloaded after each test
 *
 * ## Config (multiple databases)
 *
 * * dbs
 *   - database1
 *     * dsn *required* - MongoDb DSN with the db name specified at the end of the host after slash
 *     * user *required* - user to access database
 *     * password *required* - password
 *     * dump - path to database dump
 *     * populate: true - should the dump be loaded before test suite is started.
 *     * cleanup: true - should the dump be reloaded after each test
 *   - database2
 *     * dsn *required* - MongoDb DSN with the db name specified at the end of the host after slash
 *     * user *required* - user to access database
 *     * password *required* - password
 *     * dump - path to database dump
 *     * populate: true - should the dump be loaded before test suite is started.
 *     * cleanup: true - should the dump be reloaded after each test
 *
 */

use Codeception\Exception\ModuleConfigException;
use Codeception\Exception\ModuleException;
use \Codeception\Lib\Driver\MongoDb as MongoDbDriver;
use Codeception\Configuration as Configuration;
use Codeception\TestInterface;
use Codeception\Util\Debug;

class MultiMongoDb extends \Codeception\Module
{
    /**
     * @api
     * @var
     */
    public $dbh = [];

    /**
     * @var string[]
     */
    protected $dumpFiles = [];

    protected $globalConfig = array(
        'populate' => true,
        'cleanup'  => true,
        'dump'     => null);

    protected $populated = [];

    /**
     * @var \Codeception\Lib\Driver\MongoDb[]
     */
    public $drivers = [];

    protected $requiredFields = array('dbs');

    public function _initialize()
    {
        if (isset($this->config['dbs'])) {
            $dbs = $this->config['dbs'];
            foreach($dbs as $dbName => $db) {
                $this->setupDriver($dbName, $db);
            }
            } else if (isset($this->config['dsn'])) {
            $dbConfig = [
                'dsn' => $this->config['dsn'],
                'dump' => $this->config['dump'],
                'cleanup' => $this->config['cleanup'],
                'populate' => $this->config['populate'],
                'user' => $this->config['user'],
                'password' => $this->config['password'],
            ];
            $this->setupDriver('default', $dbConfig);
        }
    }

    protected function setupDriver($dbName, $config) {

        if (!empty($config['dump']) && (isset($config['cleanup']) or isset($config['populate']))) {

            if (!file_exists(Configuration::projectDir() . $config['dump'])) {
                throw new ModuleConfigException(__CLASS__, "
                    File with dump doesn't exist.\n
                    Please, check path for dump file: " . $config['dump']);
            }

            $dumpFile = Configuration::projectDir() . $config['dump'];
            $content = file_get_contents($dumpFile);
            $content = trim(preg_replace('%/\*(?:(?!\*/).)*\*/%s', "", $content));
            if (sizeof(explode("\n", $content))) {
                $this->dumpFiles[$dbName] = $dumpFile;
            }
        }

        try {
            $this->drivers[$dbName] = MongoDbDriver::create($config['dsn'], $config['user'], $config['password']);

        } catch (\MongoConnectionException $e) {
            throw new ModuleException(__CLASS__, $e->getMessage() . ' while creating Mongo connection');
        }

        $populate = !isset($config['populate']) || (isset($config['populate']) && $config['populate'] == true);
        // starting with loading dump
        if ($populate) {
            $this->cleanup($dbName);
            $this->loadDump($dbName);
            $this->populated[$dbName] = true;
        }
    }

    public function _before(TestInterface $test)
    {

        foreach($this->drivers as $dbName => $dbh) {
            if ($this->config['dbs'][$dbName]['cleanup'] && !$this->populated[$dbName]) {
                $this->cleanup($dbName);
                $this->loadDump($dbName);
            }
        }
    }

    public function _after(TestInterface $test)
    {
        foreach($this->drivers as $dbName => $dbh) {
            $this->populated[$dbName] = false;
        }
    }

    protected function cleanup($dbName)
    {

        $dbh = $this->drivers[$dbName]->getDbh();
        if (!$dbh) {
            throw new ModuleConfigException(__CLASS__, "No connection to database. Remove this module from config if you don't need database repopulation");
        }
        try {
            $this->drivers[$dbName]->cleanup();

        } catch (\Exception $e) {
            throw new ModuleException(__CLASS__, $e->getMessage());
        }
    }

    protected function loadDump($dbName)
    {
        if (empty($this->dumpFiles[$dbName])) {
            return;
        }
        try {
            Debug::debug("Loading dump for $dbName < {$this->dumpFiles[$dbName]}");
            $this->drivers[$dbName]->load($this->dumpFiles[$dbName]);
        } catch (\Exception $e) {
            throw new ModuleException(__CLASS__, $e->getMessage());
        }
    }

    protected function checkDatabase($dbName) {
        if (!isset($this->drivers[$dbName])) {
            throw new ModuleConfigException(__CLASS__, "No database '$dbName' configured");
        }
    }

    /**
     * Inserts data into collection
     *
     * ``` php
     * $I->haveInDatabaseCollection('database', 'users', array('name' => 'John', 'email' => 'john@coltrane.com'));
     * $user_id = $I->haveInCollection('users', array('email' => 'john@coltrane.com'));
     * ```
     *
     * @param       $database
     * @param       $collection
     * @param array $data
     * @return
     */
    public function haveInDatabaseCollection($database, $collection, array $data)
    {
        $this->checkDatabase($database);
        /** @var \MongoDB\Collection $collection */
        $collection = $this->drivers[$database]->getDbh()->selectCollection($collection);
        $collection->insertOne($data);
        return $data['_id'];
    }

    /**
     * Inserts data into collection
     *
     * ``` php
     * $I->haveInDatabaseCollection('database', 'users', array('name' => 'John', 'email' => 'john@coltrane.com'));
     * $user_id = $I->haveInCollection('users', array('email' => 'john@coltrane.com'));
     * ```
     *
     * @param $database
     * @param $collection
     * @param array $criteria
     * @internal param array $data
     * @return mixed
     */
    public function dontHaveInDatabaseCollection($database, $collection, array $criteria)
    {
        $this->checkDatabase($database);
        /** @var \MongoDB\Collection $collection */
        $collection = $this->drivers[$database]->getDbh()->selectCollection($collection);
        return $collection->deleteOne($criteria);
    }

    /**
     * Updates data into collection
     *
     * ``` php
     * $I->updateInDatabaseCollection('database', 'users', array('_id' => 'mongoID'), array('name' => 'John', 'email' => 'john@coltrane.com'));
     * ```
     *
     * @param       $database
     * @param       $collection
     * @param array $criteria
     * @param array $data
     * @return
     */
    public function updateInDatabaseCollection($database, $collection, array $criteria, array $data)
    {
        $this->checkDatabase($database);

        /** @var \MongoDB\Collection $collection */
        $collection = $this->drivers[$database]->getDbh()->selectCollection($collection);
        return $collection->updateOne($criteria, ['$set' => $data]);
    }

    /**
     * Checks if collection contains an item.
     *
     * ``` php
     * <?php
     * $I->seeInDatabaseCollection('database', 'users', array('name' => 'miles'));
     * ```
     *
     * @param       $database
     * @param       $collection
     * @param array $criteria
     */
    public function seeInDatabaseCollection($database, $collection, $criteria = array())
    {
        $this->checkDatabase($database);
        /** @var \MongoDB\Collection $collection */
        $collection = $this->drivers[$database]->getDbh()->selectCollection($collection);
        $res = $collection->countDocuments($criteria);
        \PHPUnit_Framework_Assert::assertGreaterThan(0, $res);
    }

    /**
     * Checks if collection doesn't contain an item.
     *
     * ``` php
     * <?php
     * $I->dontSeeInDatabaseCollection('database', 'users', array('name' => 'miles'));
     * ```
     *
     * @param       $database
     * @param       $collection
     * @param array $criteria
     */
    public function dontSeeInDatabaseCollection($database, $collection, $criteria = array())
    {
        $this->checkDatabase($database);
        /** @var \MongoDB\Collection $collection */
        $collection = $this->drivers[$database]->getDbh()->selectCollection($collection);
        $res = $collection->countDocuments($criteria);
        \PHPUnit_Framework_Assert::assertLessThan(1, $res);
    }

    /**
     * Grabs a data from collection
     *
     * ``` php
     * <?php
     * $cursor = $I->grabFromDatabaseCollection('database', 'users', array('name' => 'miles'));
     * ```
     *
     * @param $database
     * @param $collection
     * @param array $criteria
     * @param array $fields
     * @return \MongoDB\Driver\Cursor
     */
    public function grabFromDatabaseCollection($database, $collection, $criteria = array(), $fields = array()) {
        $this->checkDatabase($database);
        $collection = $this->drivers[$database]->getDbh()->selectCollection($collection);
        /** @var \MongoDB\Collection $collection */
        return $collection->findOne($criteria, ['projection' => $fields]);
    }

    /**
     * Grabs multiple documents from collection
     *
     * ``` php
     * <?php
     * $cursor = $I->grabManyFromDatabaseCollection('database', 'users', array('name' => 'miles'));
     * ```
     *
     * @param $database
     * @param $collection
     * @param array $criteria
     * @param array $fields
     * @return \MongoDB\Driver\Cursor
     */
    public function grabManyFromDatabaseCollection($database, $collection, $criteria = array(), $fields = array()) {
        $this->checkDatabase($database);
        $collection = $this->drivers[$database]->getDbh()->selectCollection($collection);
        /** @var \MongoDB\Collection $collection */
        return $collection->find($criteria, ['projection' => $fields]);
    }

}
